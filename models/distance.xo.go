// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Distance represents a row from 'DISTANCES'.
type Distance struct {
	ID        sql.NullInt64  `json:"id"`        // id
	Shuttle   string         `json:"shuttle"`   // shuttle
	Distance  int            `json:"distance"`  // distance
	Timestamp sql.NullString `json:"timestamp"` // timestamp

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Distance exists in the database.
func (d *Distance) Exists() bool {
	return d._exists
}

// Deleted provides information if the Distance has been deleted from the database.
func (d *Distance) Deleted() bool {
	return d._deleted
}

// Insert inserts the Distance to the database.
func (d *Distance) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if d._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO DISTANCES (` +
		`shuttle, distance, timestamp` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, d.Shuttle, d.Distance, d.Timestamp)
	res, err := db.Exec(sqlstr, d.Shuttle, d.Distance, d.Timestamp)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	d.ID = sql.NullInt64(id)
	d._exists = true

	return nil
}

// Update updates the Distance in the database.
func (d *Distance) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !d._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if d._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE DISTANCES SET ` +
		`shuttle = ?, distance = ?, timestamp = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, d.Shuttle, d.Distance, d.Timestamp, d.ID)
	_, err = db.Exec(sqlstr, d.Shuttle, d.Distance, d.Timestamp, d.ID)
	return err
}

// Save saves the Distance to the database.
func (d *Distance) Save(db XODB) error {
	if d.Exists() {
		return d.Update(db)
	}

	return d.Insert(db)
}

// Delete deletes the Distance from the database.
func (d *Distance) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !d._exists {
		return nil
	}

	// if deleted, bail
	if d._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM DISTANCES WHERE id = ?`

	// run query
	XOLog(sqlstr, d.ID)
	_, err = db.Exec(sqlstr, d.ID)
	if err != nil {
		return err
	}

	// set deleted
	d._deleted = true

	return nil
}

// DistanceByID retrieves a row from 'DISTANCES' as a Distance.
//
// Generated from index 'DISTANCES_id_pkey'.
func DistanceByID(db XODB, id sql.NullInt64) (*Distance, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, shuttle, distance, timestamp ` +
		`FROM DISTANCES ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	d := Distance{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&d.ID, &d.Shuttle, &d.Distance, &d.Timestamp)
	if err != nil {
		return nil, err
	}

	return &d, nil
}
